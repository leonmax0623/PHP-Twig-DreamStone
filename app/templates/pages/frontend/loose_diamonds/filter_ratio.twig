<div class="o-col-lg-6 o-col-md-12 u-relative hideblock">
  <div class="holder-info">
    <a class="c-info-label s-sm-invisible">?</a>
    <div class="info-desc">
      <p>The ratio is the length of the diamond divided by the width.  The ratio is not relevant for round diamonds, but is a factor to consider for all other shapes. A bigger ratio means a longer diamond, while a smaller ratio is a wider diamond.  Each shape has its own recommended ratio.</p>
      <a href="/education/diamond-education/diamond-shapes">learn more...</a>
    </div>
  </div>
  
  <p class="t-filter-label open" onclick="toggleBlock(this, 'ratioBlock');">Length to Width Ratio</p>
  <div class="u-clear"></div>
  <div id="ratioBlock" class="t-price-block t-depth-block show">
    <div class="u-clear-20"></div>
    <div id="steps-slider-ratio"></div>
        <div class="steps-slider-input">
          <input type="text" id="input-with-keypress-8">
          <input type="text" id="input-with-keypress-9">
        </div>
  </div>
</div>
<!-- nouislider -->
<script>
  $(document).ready(function(){
        var divRatio = document.querySelector('.hideblock');
        divRatio && divRatio.classList.remove('hideblock')
    })

  const handleChangeRatio = function(handle, value){
    UrlParams.set({ [handle ? 'ratio_max' : 'ratio_min']:  value}, false);
    const viewMode = UrlParams.get().v || 'g';
    const itemsWrapper = viewMode === 't' ? '.t-resalt-table-body' : '.t-search-results';
    loadPageData(location.href, itemsWrapper, true, function (finish, total) {
      updateLinks();
      refreshResultCounter(total);
      if(total == 0) {
        $('.results-message').html('<b>Please broaden your selection to view more diamond options</b>');
      }
      if(total > 0) {
          $('.results-message').html('');
      }
    });
  };
  document.addEventListener("DOMContentLoaded", () => {
    const stepsSlider = document.getElementById('steps-slider-ratio');
    const input8 = document.getElementById('input-with-keypress-8');
    const input9 = document.getElementById('input-with-keypress-9');
    const inputs = [input8, input9];
    const getVars = UrlParams.get();
    const min = parseFloat({{ ratio_min }});
    const max = parseFloat({{ ratio_max }});
    const currentMin = getVars.ratio_min && +getVars.ratio_min > min ? +getVars.ratio_min : min;
    const currentMax = getVars.ratio_max && +getVars.ratio_max < max ? +getVars.ratio_max : max;
    noUiSlider.create(stepsSlider, {
        start: [currentMin, currentMax],
        connect: true,
        range: {
            'min': [min],
            'max': max
        }
    });
    stepsSlider.noUiSlider.on('update', function (values, handle) {
        inputs[handle].value = values[handle];
    });
    stepsSlider.noUiSlider.on('change', function (values, handle) {
        inputs[handle].value = values[handle];
        handleChangeRatio(handle, inputs[handle].value);
    });
    inputs.forEach(function (input, handle) {
      input.addEventListener('change', function () {
          stepsSlider.noUiSlider.setHandle(handle, this.value);
      });
      input.addEventListener('blur', function(e) {
        let values = stepsSlider.noUiSlider.get();
        let value = Number(values[handle]);
        stepsSlider.noUiSlider.setHandle(handle, this.value);
        handleChangeRatio(handle, this.value);
      })
      input.addEventListener('keydown', function (e) {
        let values = stepsSlider.noUiSlider.get();
        let value = Number(values[handle]);
        let steps = stepsSlider.noUiSlider.steps();
        let step = steps[handle];
        let position;
          switch (e.which) {
              case 13:
                  stepsSlider.noUiSlider.setHandle(handle, this.value);
                  handleChangeRatio(handle, this.value);
                  break;
              case 38:
                  position = step[1];
                  if (position === false) {
                      position = 1;
                  }
                  if (position !== null) {
                      stepsSlider.noUiSlider.setHandle(handle, value + position);
                  }
                  break;
              case 40:
                  position = step[0];
                  if (position === false) {
                      position = 1;
                  }
                  if (position !== null) {
                      stepsSlider.noUiSlider.setHandle(handle, value - position);
                  }
                  break;
            }
        });
    });
  });
</script>

